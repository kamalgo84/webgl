ACTIVE_ATTRIBUTES: 35721
ACTIVE_TEXTURE: 34016
ACTIVE_UNIFORMS: 35718
ALIASED_LINE_WIDTH_RANGE: 33902
ALIASED_POINT_SIZE_RANGE: 33901
ALPHA: 6406
ALPHA_BITS: 3413
ALWAYS: 519
ARRAY_BUFFER: 34962
ARRAY_BUFFER_BINDING: 34964
ATTACHED_SHADERS: 35717
BACK: 1029
BLEND: 3042
BLEND_COLOR: 32773
BLEND_DST_ALPHA: 32970
BLEND_DST_RGB: 32968
BLEND_EQUATION: 32777
BLEND_EQUATION_ALPHA: 34877
BLEND_EQUATION_RGB: 32777
BLEND_SRC_ALPHA: 32971
BLEND_SRC_RGB: 32969
BLUE_BITS: 3412
BOOL: 35670
BOOL_VEC2: 35671
BOOL_VEC3: 35672
BOOL_VEC4: 35673
BROWSER_DEFAULT_WEBGL: 37444
BUFFER_SIZE: 34660
BUFFER_USAGE: 34661
BYTE: 5120
CCW: 2305
CLAMP_TO_EDGE: 33071
COLOR_ATTACHMENT0: 36064
COLOR_BUFFER_BIT: 16384
COLOR_CLEAR_VALUE: 3106
COLOR_WRITEMASK: 3107
COMPILE_STATUS: 35713
COMPRESSED_TEXTURE_FORMATS: 34467
CONSTANT_ALPHA: 32771
CONSTANT_COLOR: 32769
CONTEXT_LOST_WEBGL: 37442
CULL_FACE: 2884
CULL_FACE_MODE: 2885
CURRENT_PROGRAM: 35725
CURRENT_VERTEX_ATTRIB: 34342
CW: 2304
DECR: 7683
DECR_WRAP: 34056
DELETE_STATUS: 35712
DEPTH_ATTACHMENT: 36096
DEPTH_BITS: 3414
DEPTH_BUFFER_BIT: 256
DEPTH_CLEAR_VALUE: 2931
DEPTH_COMPONENT: 6402
DEPTH_COMPONENT16: 33189
DEPTH_FUNC: 2932
DEPTH_RANGE: 2928
DEPTH_STENCIL: 34041
DEPTH_STENCIL_ATTACHMENT: 33306
DEPTH_TEST: 2929
DEPTH_WRITEMASK: 2930
DITHER: 3024
DONT_CARE: 4352
DST_ALPHA: 772
DST_COLOR: 774
DYNAMIC_DRAW: 35048
ELEMENT_ARRAY_BUFFER: 34963
ELEMENT_ARRAY_BUFFER_BINDING: 34965
EQUAL: 514
FASTEST: 4353
FLOAT: 5126
FLOAT_MAT2: 35674
FLOAT_MAT3: 35675
FLOAT_MAT4: 35676
FLOAT_VEC2: 35664
FLOAT_VEC3: 35665
FLOAT_VEC4: 35666
FRAGMENT_SHADER: 35632
FRAMEBUFFER: 36160
FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049
FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048
FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051
FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050
FRAMEBUFFER_BINDING: 36006
FRAMEBUFFER_COMPLETE: 36053
FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054
FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057
FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055
FRAMEBUFFER_UNSUPPORTED: 36061
FRONT: 1028
FRONT_AND_BACK: 1032
FRONT_FACE: 2886
FUNC_ADD: 32774
FUNC_REVERSE_SUBTRACT: 32779
FUNC_SUBTRACT: 32778
GENERATE_MIPMAP_HINT: 33170
GEQUAL: 518
GREATER: 516
GREEN_BITS: 3411
HIGH_FLOAT: 36338
HIGH_INT: 36341
INCR: 7682
INCR_WRAP: 34055
INT: 5124
INT_VEC2: 35667
INT_VEC3: 35668
INT_VEC4: 35669
INVALID_ENUM: 1280
INVALID_FRAMEBUFFER_OPERATION: 1286
INVALID_OPERATION: 1282
INVALID_VALUE: 1281
INVERT: 5386
KEEP: 7680
LEQUAL: 515
LESS: 513
LINEAR: 9729
LINEAR_MIPMAP_LINEAR: 9987
LINEAR_MIPMAP_NEAREST: 9985
LINES: 1
LINE_LOOP: 2
LINE_STRIP: 3
LINE_WIDTH: 2849
LINK_STATUS: 35714
LOW_FLOAT: 36336
LOW_INT: 36339
LUMINANCE: 6409
LUMINANCE_ALPHA: 6410
MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661
MAX_CUBE_MAP_TEXTURE_SIZE: 34076
MAX_FRAGMENT_UNIFORM_VECTORS: 36349
MAX_RENDERBUFFER_SIZE: 34024
MAX_TEXTURE_IMAGE_UNITS: 34930
MAX_TEXTURE_SIZE: 3379
MAX_VARYING_VECTORS: 36348
MAX_VERTEX_ATTRIBS: 34921
MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660
MAX_VERTEX_UNIFORM_VECTORS: 36347
MAX_VIEWPORT_DIMS: 3386
MEDIUM_FLOAT: 36337
MEDIUM_INT: 36340
MIRRORED_REPEAT: 33648
NEAREST: 9728
NEAREST_MIPMAP_LINEAR: 9986
NEAREST_MIPMAP_NEAREST: 9984
NEVER: 512
NICEST: 4354
NONE: 0
NOTEQUAL: 517
NO_ERROR: 0
ONE: 1
ONE_MINUS_CONSTANT_ALPHA: 32772
ONE_MINUS_CONSTANT_COLOR: 32770
ONE_MINUS_DST_ALPHA: 773
ONE_MINUS_DST_COLOR: 775
ONE_MINUS_SRC_ALPHA: 771
ONE_MINUS_SRC_COLOR: 769
OUT_OF_MEMORY: 1285
PACK_ALIGNMENT: 3333
POINTS: 0
POLYGON_OFFSET_FACTOR: 32824
POLYGON_OFFSET_FILL: 32823
POLYGON_OFFSET_UNITS: 10752
RED_BITS: 3410
RENDERBUFFER: 36161
RENDERBUFFER_ALPHA_SIZE: 36179
RENDERBUFFER_BINDING: 36007
RENDERBUFFER_BLUE_SIZE: 36178
RENDERBUFFER_DEPTH_SIZE: 36180
RENDERBUFFER_GREEN_SIZE: 36177
RENDERBUFFER_HEIGHT: 36163
RENDERBUFFER_INTERNAL_FORMAT: 36164
RENDERBUFFER_RED_SIZE: 36176
RENDERBUFFER_STENCIL_SIZE: 36181
RENDERBUFFER_WIDTH: 36162
RENDERER: 7937
REPEAT: 10497
REPLACE: 7681
RGB: 6407
RGB5_A1: 32855
RGB565: 36194
RGBA: 6408
RGBA4: 32854
SAMPLER_2D: 35678
SAMPLER_CUBE: 35680
SAMPLES: 32937
SAMPLE_ALPHA_TO_COVERAGE: 32926
SAMPLE_BUFFERS: 32936
SAMPLE_COVERAGE: 32928
SAMPLE_COVERAGE_INVERT: 32939
SAMPLE_COVERAGE_VALUE: 32938
SCISSOR_BOX: 3088
SCISSOR_TEST: 3089
SHADER_TYPE: 35663
SHADING_LANGUAGE_VERSION: 35724
SHORT: 5122
SRC_ALPHA: 770
SRC_ALPHA_SATURATE: 776
SRC_COLOR: 768
STATIC_DRAW: 35044
STENCIL_ATTACHMENT: 36128
STENCIL_BACK_FAIL: 34817
STENCIL_BACK_FUNC: 34816
STENCIL_BACK_PASS_DEPTH_FAIL: 34818
STENCIL_BACK_PASS_DEPTH_PASS: 34819
STENCIL_BACK_REF: 36003
STENCIL_BACK_VALUE_MASK: 36004
STENCIL_BACK_WRITEMASK: 36005
STENCIL_BITS: 3415
STENCIL_BUFFER_BIT: 1024
STENCIL_CLEAR_VALUE: 2961
STENCIL_FAIL: 2964
STENCIL_FUNC: 2962
STENCIL_INDEX: 6401
STENCIL_INDEX8: 36168
STENCIL_PASS_DEPTH_FAIL: 2965
STENCIL_PASS_DEPTH_PASS: 2966
STENCIL_REF: 2967
STENCIL_TEST: 2960
STENCIL_VALUE_MASK: 2963
STENCIL_WRITEMASK: 2968
STREAM_DRAW: 35040
SUBPIXEL_BITS: 3408
TEXTURE: 5890
TEXTURE0: 33984
TEXTURE1: 33985
TEXTURE2: 33986
TEXTURE3: 33987
TEXTURE4: 33988
TEXTURE5: 33989
TEXTURE6: 33990
TEXTURE7: 33991
TEXTURE8: 33992
TEXTURE9: 33993
TEXTURE10: 33994
TEXTURE11: 33995
TEXTURE12: 33996
TEXTURE13: 33997
TEXTURE14: 33998
TEXTURE15: 33999
TEXTURE16: 34000
TEXTURE17: 34001
TEXTURE18: 34002
TEXTURE19: 34003
TEXTURE20: 34004
TEXTURE21: 34005
TEXTURE22: 34006
TEXTURE23: 34007
TEXTURE24: 34008
TEXTURE25: 34009
TEXTURE26: 34010
TEXTURE27: 34011
TEXTURE28: 34012
TEXTURE29: 34013
TEXTURE30: 34014
TEXTURE31: 34015
TEXTURE_2D: 3553
TEXTURE_BINDING_2D: 32873
TEXTURE_BINDING_CUBE_MAP: 34068
TEXTURE_CUBE_MAP: 34067
TEXTURE_CUBE_MAP_NEGATIVE_X: 34070
TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072
TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074
TEXTURE_CUBE_MAP_POSITIVE_X: 34069
TEXTURE_CUBE_MAP_POSITIVE_Y: 34071
TEXTURE_CUBE_MAP_POSITIVE_Z: 34073
TEXTURE_MAG_FILTER: 10240
TEXTURE_MIN_FILTER: 10241
TEXTURE_WRAP_S: 10242
TEXTURE_WRAP_T: 10243
TRIANGLES: 4
TRIANGLE_FAN: 6
TRIANGLE_STRIP: 5
UNPACK_ALIGNMENT: 3317
UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443
UNPACK_FLIP_Y_WEBGL: 37440
UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441
UNSIGNED_BYTE: 5121
UNSIGNED_INT: 5125
UNSIGNED_SHORT: 5123
UNSIGNED_SHORT_4_4_4_4: 32819
UNSIGNED_SHORT_5_5_5_1: 32820
UNSIGNED_SHORT_5_6_5: 33635
VALIDATE_STATUS: 35715
VENDOR: 7936
VERSION: 7938
VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975
VERTEX_ATTRIB_ARRAY_ENABLED: 34338
VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922
VERTEX_ATTRIB_ARRAY_POINTER: 34373
VERTEX_ATTRIB_ARRAY_SIZE: 34339
VERTEX_ATTRIB_ARRAY_STRIDE: 34340
VERTEX_ATTRIB_ARRAY_TYPE: 34341
VERTEX_SHADER: 35633
VIEWPORT: 2978
ZERO: 0
activeTexture: function activeTexture() { [native code] }
attachShader: function attachShader() { [native code] }
bindAttribLocation: function bindAttribLocation() { [native code] }
bindBuffer: function bindBuffer() { [native code] }
bindFramebuffer: function bindFramebuffer() { [native code] }
bindRenderbuffer: function bindRenderbuffer() { [native code] }
bindTexture: function bindTexture() { [native code] }
blendColor: function blendColor() { [native code] }
blendEquation: function blendEquation() { [native code] }
blendEquationSeparate: function blendEquationSeparate() { [native code] }
blendFunc: function blendFunc() { [native code] }
blendFuncSeparate: function blendFuncSeparate() { [native code] }
bufferData: function bufferData() { [native code] }
bufferSubData: function bufferSubData() { [native code] }
checkFramebufferStatus: function checkFramebufferStatus() { [native code] }
clear: function clear() { [native code] }
clearColor: function clearColor() { [native code] }
clearDepth: function clearDepth() { [native code] }
clearStencil: function clearStencil() { [native code] }
colorMask: function colorMask() { [native code] }
compileShader: function compileShader() { [native code] }
compressedTexImage2D: function compressedTexImage2D() { [native code] }
compressedTexSubImage2D: function compressedTexSubImage2D() { [native code] }
constructor: function WebGLRenderingContext() { [native code] }
copyTexImage2D: function copyTexImage2D() { [native code] }
copyTexSubImage2D: function copyTexSubImage2D() { [native code] }
createBuffer: function createBuffer() { [native code] }
createFramebuffer: function createFramebuffer() { [native code] }
createProgram: function createProgram() { [native code] }
createRenderbuffer: function createRenderbuffer() { [native code] }
createShader: function createShader() { [native code] }
createTexture: function createTexture() { [native code] }
cullFace: function cullFace() { [native code] }
deleteBuffer: function deleteBuffer() { [native code] }
deleteFramebuffer: function deleteFramebuffer() { [native code] }
deleteProgram: function deleteProgram() { [native code] }
deleteRenderbuffer: function deleteRenderbuffer() { [native code] }
deleteShader: function deleteShader() { [native code] }
deleteTexture: function deleteTexture() { [native code] }
depthFunc: function depthFunc() { [native code] }
depthMask: function depthMask() { [native code] }
depthRange: function depthRange() { [native code] }
detachShader: function detachShader() { [native code] }
disable: function disable() { [native code] }
disableVertexAttribArray: function disableVertexAttribArray() { [native code] }
drawArrays: function drawArrays() { [native code] }
drawElements: function drawElements() { [native code] }
enable: function enable() { [native code] }
enableVertexAttribArray: function enableVertexAttribArray() { [native code] }
finish: function finish() { [native code] }
flush: function flush() { [native code] }
framebufferRenderbuffer: function framebufferRenderbuffer() { [native code] }
framebufferTexture2D: function framebufferTexture2D() { [native code] }
frontFace: function frontFace() { [native code] }
generateMipmap: function generateMipmap() { [native code] }
getActiveAttrib: function getActiveAttrib() { [native code] }
getActiveUniform: function getActiveUniform() { [native code] }
getAttachedShaders: function getAttachedShaders() { [native code] }
getAttribLocation: function getAttribLocation() { [native code] }
getBufferParameter: function getBufferParameter() { [native code] }
getContextAttributes: function getContextAttributes() { [native code] }
getError: function getError() { [native code] }
getExtension: function getExtension() { [native code] }
getFramebufferAttachmentParameter: function getFramebufferAttachmentParameter() { [native code] }
getParameter: function getParameter() { [native code] }
getProgramInfoLog: function getProgramInfoLog() { [native code] }
getProgramParameter: function getProgramParameter() { [native code] }
getRenderbufferParameter: function getRenderbufferParameter() { [native code] }
getShaderInfoLog: function getShaderInfoLog() { [native code] }
getShaderParameter: function getShaderParameter() { [native code] }
getShaderPrecisionFormat: function getShaderPrecisionFormat() { [native code] }
getShaderSource: function getShaderSource() { [native code] }
getSupportedExtensions: function getSupportedExtensions() { [native code] }
getTexParameter: function getTexParameter() { [native code] }
getUniform: function getUniform() { [native code] }
getUniformLocation: function getUniformLocation() { [native code] }
getVertexAttrib: function getVertexAttrib() { [native code] }
getVertexAttribOffset: function getVertexAttribOffset() { [native code] }
hint: function hint() { [native code] }
isBuffer: function isBuffer() { [native code] }
isContextLost: function isContextLost() { [native code] }
isEnabled: function isEnabled() { [native code] }
isFramebuffer: function isFramebuffer() { [native code] }
isProgram: function isProgram() { [native code] }
isRenderbuffer: function isRenderbuffer() { [native code] }
isShader: function isShader() { [native code] }
isTexture: function isTexture() { [native code] }
lineWidth: function lineWidth() { [native code] }
linkProgram: function linkProgram() { [native code] }
pixelStorei: function pixelStorei() { [native code] }
polygonOffset: function polygonOffset() { [native code] }
readPixels: function readPixels() { [native code] }
renderbufferStorage: function renderbufferStorage() { [native code] }
sampleCoverage: function sampleCoverage() { [native code] }
scissor: function scissor() { [native code] }
shaderSource: function shaderSource() { [native code] }
stencilFunc: function stencilFunc() { [native code] }
stencilFuncSeparate: function stencilFuncSeparate() { [native code] }
stencilMask: function stencilMask() { [native code] }
stencilMaskSeparate: function stencilMaskSeparate() { [native code] }
stencilOp: function stencilOp() { [native code] }
stencilOpSeparate: function stencilOpSeparate() { [native code] }
texImage2D: function texImage2D() { [native code] }
texParameterf: function texParameterf() { [native code] }
texParameteri: function texParameteri() { [native code] }
texSubImage2D: function texSubImage2D() { [native code] }
uniform1f: function uniform1f() { [native code] }
uniform1fv: function uniform1fv() { [native code] }
uniform1i: function uniform1i() { [native code] }
uniform1iv: function uniform1iv() { [native code] }
uniform2f: function uniform2f() { [native code] }
uniform2fv: function uniform2fv() { [native code] }
uniform2i: function uniform2i() { [native code] }
uniform2iv: function uniform2iv() { [native code] }
uniform3f: function uniform3f() { [native code] }
uniform3fv: function uniform3fv() { [native code] }
uniform3i: function uniform3i() { [native code] }
uniform3iv: function uniform3iv() { [native code] }
uniform4f: function uniform4f() { [native code] }
uniform4fv: function uniform4fv() { [native code] }
uniform4i: function uniform4i() { [native code] }
uniform4iv: function uniform4iv() { [native code] }
uniformMatrix2fv: function uniformMatrix2fv() { [native code] }
uniformMatrix3fv: function uniformMatrix3fv() { [native code] }
uniformMatrix4fv: function uniformMatrix4fv() { [native code] }
useProgram: function useProgram() { [native code] }
validateProgram: function validateProgram() { [native code] }
vertexAttrib1f: function vertexAttrib1f() { [native code] }
vertexAttrib1fv: function vertexAttrib1fv() { [native code] }
vertexAttrib2f: function vertexAttrib2f() { [native code] }
vertexAttrib2fv: function vertexAttrib2fv() { [native code] }
vertexAttrib3f: function vertexAttrib3f() { [native code] }
vertexAttrib3fv: function vertexAttrib3fv() { [native code] }
vertexAttrib4f: function vertexAttrib4f() { [native code] }
vertexAttrib4fv: function vertexAttrib4fv() { [native code] }
vertexAttribPointer: function vertexAttribPointer() { [native code] }
viewport: function viewport() { [native code] }

















create: function (a){var b=new glMatrixArrayType(16);if(a){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15]}return b}
determinant: function (a){var b=a[0],c=a[1],d=a[2],e=a[3],g=a[4],f=a[5],h=a[6],i=a[7],j=a[8],k=a[9],l=a[10],o=a[11],m=a[12],n=a[13],p=a[14];a=a[15];return m*k*h*e-j*n*h*e-m*f*l*e+g*n*l*e+j*f*p*e-g*k*p*e-m*k*d*i+j*n*d*i+m*c*l*i-b*n*l*i-j*c*p*i+b*k*p*i+m*f*d*o-g*n*d*o-m*c*h*o+b*n*h*o+g*c*p*o-b*f*p*o-j*f*d*a+g*k*d*a+j*c*h*a-b*k*h*a-g*c*l*a+b*f*l*a}
frustum: function (a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=e*2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=e*2/i;f[6]=0;f[7]=0;f[8]=(b+a)/h;f[9]=(d+c)/i;f[10]=-(g+e)/j;f[11]=-1;f[12]=0;f[13]=0;f[14]=-(g*e*2)/j;f[15]=0;return f}
identity: function (a){a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=0;a[5]=1;a[6]=0;a[7]=0;a[8]=0;a[9]=0;a[10]=1;a[11]=0;a[12]=0;a[13]=0;a[14]=0;a[15]=1;return a}
inverse: function (a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=a[4],h=a[5],i=a[6],j=a[7],k=a[8],l=a[9],o=a[10],m=a[11],n=a[12],p=a[13],r=a[14],s=a[15],A=c*h-d*f,B=c*i-e*f,t=c*j-g*f,u=d*i-e*h,v=d*j-g*h,w=e*j-g*i,x=k*p-l*n,y=k*r-o*n,z=k*s-m*n,C=l*r-o*p,D=l*s-m*p,E=o*s-m*r,q=1/(A*E-B*D+t*C+u*z-v*y+w*x);b[0]=(h*E-i*D+j*C)*q;b[1]=(-d*E+e*D-g*C)*q;b[2]=(p*w-r*v+s*u)*q;b[3]=(-l*w+o*v-m*u)*q;b[4]=(-f*E+i*z-j*y)*q;b[5]=(c*E-e*z+g*y)*q;b[6]=(-n*w+r*t-s*B)*q;b[7]=(k*w-o*t+m*B)*q;b[8]=(f*D-h*z+j*x)*q;
lookAt: function (a,b,c,d){d||(d=mat4.create());var e=a[0],g=a[1];a=a[2];var f=c[0],h=c[1],i=c[2];c=b[1];var j=b[2];if(e==b[0]&&g==c&&a==j)return mat4.identity(d);var k,l,o,m;c=e-b[0];j=g-b[1];b=a-b[2];m=1/Math.sqrt(c*c+j*j+b*b);c*=m;j*=m;b*=m;k=h*b-i*j;i=i*c-f*b;f=f*j-h*c;if(m=Math.sqrt(k*k+i*i+f*f)){m=1/m;k*=m;i*=m;f*=m}else f=i=k=0;h=j*f-b*i;l=b*k-c*f;o=c*i-j*k;if(m=Math.sqrt(h*h+l*l+o*o)){m=1/m;h*=m;l*=m;o*=m}else o=l=h=0;d[0]=k;d[1]=h;d[2]=c;d[3]=0;d[4]=i;d[5]=l;d[6]=j;d[7]=0;d[8]=f;d[9]=
multiply: function (a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],f=a[3],h=a[4],i=a[5],j=a[6],k=a[7],l=a[8],o=a[9],m=a[10],n=a[11],p=a[12],r=a[13],s=a[14];a=a[15];var A=b[0],B=b[1],t=b[2],u=b[3],v=b[4],w=b[5],x=b[6],y=b[7],z=b[8],C=b[9],D=b[10],E=b[11],q=b[12],F=b[13],G=b[14];b=b[15];c[0]=A*d+B*h+t*l+u*p;c[1]=A*e+B*i+t*o+u*r;c[2]=A*g+B*j+t*m+u*s;c[3]=A*f+B*k+t*n+u*a;c[4]=v*d+w*h+x*l+y*p;c[5]=v*e+w*i+x*o+y*r;c[6]=v*g+w*j+x*m+y*s;c[7]=v*f+w*k+x*n+y*a;c[8]=z*d+C*h+D*l+E*p;c[9]=z*e+C*i+D*o+E*r;c[10]=z*
multiplyVec3: function (a,b,c){c||(c=b);var d=b[0],e=b[1];b=b[2];c[0]=a[0]*d+a[4]*e+a[8]*b+a[12];c[1]=a[1]*d+a[5]*e+a[9]*b+a[13];c[2]=a[2]*d+a[6]*e+a[10]*b+a[14];return c}
multiplyVec4: function (a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2];b=b[3];c[0]=a[0]*d+a[4]*e+a[8]*g+a[12]*b;c[1]=a[1]*d+a[5]*e+a[9]*g+a[13]*b;c[2]=a[2]*d+a[6]*e+a[10]*g+a[14]*b;c[3]=a[3]*d+a[7]*e+a[11]*g+a[15]*b;return c}
ortho: function (a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=2/i;f[6]=0;f[7]=0;f[8]=0;f[9]=0;f[10]=-2/j;f[11]=0;f[12]=-(a+b)/h;f[13]=-(d+c)/i;f[14]=-(g+e)/j;f[15]=1;return f}
perspective: function (a,b,c,d,e){a=c*Math.tan(a*Math.PI/360);b=a*b;return mat4.frustum(-b,b,-a,a,c,d,e)}
rotate: function (a,b,c,d){var e=c[0],g=c[1];c=c[2];var f=Math.sqrt(e*e+g*g+c*c);if(!f)return null;if(f!=1){f=1/f;e*=f;g*=f;c*=f}var h=Math.sin(b),i=Math.cos(b),j=1-i;b=a[0];f=a[1];var k=a[2],l=a[3],o=a[4],m=a[5],n=a[6],p=a[7],r=a[8],s=a[9],A=a[10],B=a[11],t=e*e*j+i,u=g*e*j+c*h,v=c*e*j-g*h,w=e*g*j-c*h,x=g*g*j+i,y=c*g*j+e*h,z=e*c*j+g*h;e=g*c*j-e*h;g=c*c*j+i;if(d){if(a!=d){d[12]=a[12];d[13]=a[13];d[14]=a[14];d[15]=a[15]}}else d=a;d[0]=b*t+o*u+r*v;d[1]=f*t+m*u+s*v;d[2]=k*t+n*u+A*v;d[3]=l*t+p*u+B*
rotateX: function (a,b,c){var d=Math.sin(b);b=Math.cos(b);var e=a[4],g=a[5],f=a[6],h=a[7],i=a[8],j=a[9],k=a[10],l=a[11];if(c){if(a!=c){c[0]=a[0];c[1]=a[1];c[2]=a[2];c[3]=a[3];c[12]=a[12];c[13]=a[13];c[14]=a[14];c[15]=a[15]}}else c=a;c[4]=e*b+i*d;c[5]=g*b+j*d;c[6]=f*b+k*d;c[7]=h*b+l*d;c[8]=e*-d+i*b;c[9]=g*-d+j*b;c[10]=f*-d+k*b;c[11]=h*-d+l*b;return c}
rotateY: function (a,b,c){var d=Math.sin(b);b=Math.cos(b);var e=a[0],g=a[1],f=a[2],h=a[3],i=a[8],j=a[9],k=a[10],l=a[11];if(c){if(a!=c){c[4]=a[4];c[5]=a[5];c[6]=a[6];c[7]=a[7];c[12]=a[12];c[13]=a[13];c[14]=a[14];c[15]=a[15]}}else c=a;c[0]=e*b+i*-d;c[1]=g*b+j*-d;c[2]=f*b+k*-d;c[3]=h*b+l*-d;c[8]=e*d+i*b;c[9]=g*d+j*b;c[10]=f*d+k*b;c[11]=h*d+l*b;return c}
rotateZ: function (a,b,c){var d=Math.sin(b);b=Math.cos(b);var e=a[0],g=a[1],f=a[2],h=a[3],i=a[4],j=a[5],k=a[6],l=a[7];if(c){if(a!=c){c[8]=a[8];c[9]=a[9];c[10]=a[10];c[11]=a[11];c[12]=a[12];c[13]=a[13];c[14]=a[14];c[15]=a[15]}}else c=a;c[0]=e*b+i*d;c[1]=g*b+j*d;c[2]=f*b+k*d;c[3]=h*b+l*d;c[4]=e*-d+i*b;c[5]=g*-d+j*b;c[6]=f*-d+k*b;c[7]=h*-d+l*b;return c}
scale: function (a,b,c){var d=b[0],e=b[1];b=b[2];if(!c||a==c){a[0]*=d;a[1]*=d;a[2]*=d;a[3]*=d;a[4]*=e;a[5]*=e;a[6]*=e;a[7]*=e;a[8]*=b;a[9]*=b;a[10]*=b;a[11]*=b;return a}c[0]=a[0]*d;c[1]=a[1]*d;c[2]=a[2]*d;c[3]=a[3]*d;c[4]=a[4]*e;c[5]=a[5]*e;c[6]=a[6]*e;c[7]=a[7]*e;c[8]=a[8]*b;c[9]=a[9]*b;c[10]=a[10]*b;c[11]=a[11]*b;c[12]=a[12];c[13]=a[13];c[14]=a[14];c[15]=a[15];return c}
set: function (a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15];return b}
str: function (a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+", "+a[9]+", "+a[10]+", "+a[11]+", "+a[12]+", "+a[13]+", "+a[14]+", "+a[15]+"]"}
toInverseMat3: function (a,b){var c=a[0],d=a[1],e=a[2],g=a[4],f=a[5],h=a[6],i=a[8],j=a[9],k=a[10],l=k*f-h*j,o=-k*g+h*i,m=j*g-f*i,n=c*l+d*o+e*m;if(!n)return null;n=1/n;b||(b=mat3.create());b[0]=l*n;b[1]=(-k*d+e*j)*n;b[2]=(h*d-e*f)*n;b[3]=o*n;b[4]=(k*c-e*i)*n;b[5]=(-h*c+e*g)*n;b[6]=m*n;b[7]=(-j*c+d*i)*n;b[8]=(f*c-d*g)*n;return b}
toMat3: function (a,b){b||(b=mat3.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[4];b[4]=a[5];b[5]=a[6];b[6]=a[8];b[7]=a[9];b[8]=a[10];return b}
toRotationMat: function (a,b){b||(b=mat4.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b}
translate: function (a,b,c){var d=b[0],e=b[1];b=b[2];if(!c||a==c){a[12]=a[0]*d+a[4]*e+a[8]*b+a[12];a[13]=a[1]*d+a[5]*e+a[9]*b+a[13];a[14]=a[2]*d+a[6]*e+a[10]*b+a[14];a[15]=a[3]*d+a[7]*e+a[11]*b+a[15];return a}var g=a[0],f=a[1],h=a[2],i=a[3],j=a[4],k=a[5],l=a[6],o=a[7],m=a[8],n=a[9],p=a[10],r=a[11];c[0]=g;c[1]=f;c[2]=h;c[3]=i;c[4]=j;c[5]=k;c[6]=l;c[7]=o;c[8]=m;c[9]=n;c[10]=p;c[11]=r;c[12]=g*d+j*e+m*b+a[12];c[13]=f*d+k*e+n*b+a[13];c[14]=h*d+l*e+p*b+a[14];c[15]=i*d+o*e+r*b+a[15];return c}
transpos