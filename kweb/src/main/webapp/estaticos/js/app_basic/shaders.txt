Point lighting 
<script id="shader-fs" type="x-shader/x-fragment">
    #ifdef GL_ES
    precision highp float;
    #endif

    varying highp vec4 vColor;
	varying highp vec3 vLight;

    void main(void) 
	{
		gl_FragColor = vec4(vColor.xyz * vLight, vColor.a);
    }
	
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec3 aVertexColor;
	attribute vec3 aVertexNormal;
	
	uniform mat3 uNormalMatrix;
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

	varying highp vec4 vColor;
	varying highp vec3 vLight;
	varying highp vec3 v_normal;

    void main(void) 
	{
     
		gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vColor = vec4(aVertexColor, 1.0);
        //Point lighting
        vec3 ambientLight = vec3(0.5, 0.5, 0.5);
        vec3 pointLightPosition = vec3(0.0,3.0,0.0);
        vec3 pointLightDirection = normalize( vec3(pointLightPosition.xyz - aVertexPosition.xyz) );
	    vec3 L = vec3(uPMatrix * uMVMatrix * vec4(pointLightDirection, 1.0));
        vec3 N = uNormalMatrix * aVertexNormal;
        float diffuseLightAmount = max( dot(normalize(N), normalize(L)), 0.0);
        vLight = ambientLight + (diffuseLightAmount * aVertexColor);
		
		.
		
    }
</script>

Ambient lighting















<script id="shader-fs" type="x-shader/x-fragment">
    #ifdef GL_ES
    precision highp float;
    #endif

    varying highp vec4 vColor;
	varying highp vec3 vLight;
	varying highp vec3 v_normal;
	varying vec2 vTextureCoord;
	
	uniform sampler2D uSampler;

    void main(void) 
	{
		//gl_FragColor = vec4(vColor.xyz * vLight, vColor.a);
		
		const vec3 lightDir = vec3(0.0, 0.0, -1.0);
        vec3  normal  = normalize(v_normal);
        float lambert = max(dot(normal, -lightDir), 0.0);
        vec3  color   = vColor.xyz * lambert;
		gl_FragColor  = vec4(color.xyz * vLight,1.0);
		gl_FragColor = vec4(vColor.xyz * vLight, vColor.a);
		
		gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
    }
	
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec3 aVertexColor;
	attribute vec3 aVertexNormal;
	attribute vec2 aVertexTexture;
	
	uniform mat3 uNormalMatrix;
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

	varying highp vec4 vColor;
	varying highp vec3 vLight;
	varying highp vec3 v_normal;
	varying highp vec2 vTextureCoord;

    void main(void) 
	{
     
		gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
		vTextureCoord = aVertexTexture.xy;
        vColor = vec4(aVertexColor, 1.0);
		v_normal = uNormalMatrix * aVertexNormal;
        //Point lighting
        vec3 ambientLight = vec3(0.5, 0.5, 0.5);
        vec3 pointLightPosition = vec3(0.0,6.0,10.0);
        vec3 pointLightDirection = normalize( vec3(pointLightPosition.xyz - aVertexPosition.xyz) );
	    vec3 L = vec3(uPMatrix * uMVMatrix * vec4(pointLightDirection, 1.0));
        vec3 N = uNormalMatrix * aVertexNormal;
        float diffuseLightAmount = max( dot(normalize(N), normalize(L)), 0.0);
        vLight = ambientLight + (diffuseLightAmount * aVertexColor);
	   
	   //vLight = vec3(0.5, 0.5, 0.5);
		
    }
</script>