package com.kamal.web.servicing.beans;

import java.io.Serializable;

public class Shaders implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8889667695191813313L;
	
	public static final String VERTEX_SHADER=""
			+"    #ifdef GL_ES                                                            "+"\n"
			+"    precision highp float;                                                  "+"\n"
			+"    #endif                                                                  "+"\n"
			+"                                                                            "+"\n"
			+"    attribute vec3 aVertexPosition;                                         "+"\n"
			+"    attribute vec4 aVertexColor;                                            "+"\n"
			+"	  attribute vec3 aVertexNormal;                                             "+"\n"
			+"	  attribute vec2 aVertexTexture;                                            "+"\n"
			+"	                                                                          "+"\n"
			+"	  uniform mat4 uNormalMatrix;                                               "+"\n"
			+"    uniform mat4 uMVMatrix;                                                 "+"\n"
			+"    uniform mat4 uPMatrix;                                                  "+"\n"
			+"	  uniform vec3 uAmbientColor;                                               "+"\n"
			+"	                                                                          "+"\n"
			+"                                                                            "+"\n"
			+"	varying vec4 vColor;                                                      "+"\n"
			+"	varying vec4 v_normal;                                                    "+"\n"
			+"	varying vec2 vTextureCoord;                                               "+"\n"
			+"	varying vec3 vLightWeighting;                                             "+"\n"
			+"	varying vec4 vPosition;                                                   "+"\n"
			+"	varying vec3 VertexNormal;                                                "+"\n"
			+"	varying vec3 vLighting;                                                   "+"\n"
			+"                                                                            "+"\n"
			+"    void main(void)                                                         "+"\n"
			+"	{                                                                         "+"\n"
			+"		VertexNormal=aVertexNormal;                                           "+"\n"
			+"		//vPosition = uMVMatrix * vec4(aVertexPosition, 1.0);                 "+"\n"
			+"		vPosition = vec4(aVertexPosition, 1.0);                               "+"\n"
			+"		v_normal = uNormalMatrix * vec4(aVertexNormal, 1.0);                  "+"\n"
			+"		vTextureCoord = aVertexTexture;                                       "+"\n"
			+"        vColor = aVertexColor;                                              "+"\n"
			+"		//gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);    "+"\n"
			+"		gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);      "+"\n"
			+"		                                                                      "+"\n"
			+"    }";
	
	
	public static final String FRAGMENT_SHADER=""
			+"   #ifdef GL_ES                                                                                                                                         "+"\n"
			+"   precision highp float;                                                                                                                               "+"\n"
			+"   #endif                                                                                                                                               "+"\n"
			+"                                                                                                                                                        "+"\n"
			+"   varying vec4 vColor;                                                                                                                                 "+"\n"
			+"	varying vec4 v_normal;                                                                                                                                "+"\n"
			+"	varying vec2 vTextureCoord;                                                                                                                           "+"\n"
			+"	varying vec3 vLightWeighting;                                                                                                                         "+"\n"
			+"	varying vec4 vPosition;                                                                                                                               "+"\n"
			+"	                                                                                                                                                      "+"\n"
			+"	uniform mat4 uNormalMatrix;                                                                                                                           "+"\n"
			+"   uniform mat4 uMVMatrix;                                                                                                                              "+"\n"
			+"   uniform mat4 uPMatrix;                                                                                                                               "+"\n"
			+"	                                                                                                                                                      "+"\n"
			+"	uniform vec3 uAmbientColor;                                                                                                                           "+"\n"
			+"                                                                                                                                                        "+"\n"
			+"	uniform vec3 uPointLightingLocation;                                                                                                                  "+"\n"
			+"	uniform vec3 uDirectionalColor;                                                                                                                       "+"\n"
			+"	uniform float uMaterialShininess;                                                                                                                     "+"\n"
			+"	uniform vec3 uPointLightingSpecularColor;                                                                                                             "+"\n"
			+"	                                                                                                                                                      "+"\n"
			+"	uniform sampler2D uSampler;                                                                                                                           "+"\n"
			+"	varying vec3 vLighting;                                                                                                                               "+"\n"
			+"	varying vec3 VertexNormal;                                                                                                                            "+"\n"
			+"                                                                                                                                                        "+"\n"
			+"   void main(void)                                                                                                                                      "+"\n"
			+"	{                                                                                                                                                     "+"\n"
			+"		                                                                                                                                                  "+"\n"
			+"		vec4 vertexColor=vColor;                                                                                                                          "+"\n"
			+"		                                                                                                                                                  "+"\n"
			+"		vec3 lightWeighting;                                                                                                                              "+"\n"
			+"		                                                                                                                                                  "+"\n"
			+"		vec3 lightDirection = normalize(uPointLightingLocation - vPosition.xyz);                                                                          "+"\n"
			+"		//vec3 lightDirection = normalize(uPointLightingLocation);                                                                                        "+"\n"
			+"		//vec3 lightDirection = normalize(LightingLocation);                                                                                              "+"\n"
			+"		//vec3 lightDirection = vec3(0.0, 0.0, 1.0);                                                                                                      "+"\n"
			+"		vec3 normal = normalize(v_normal.xyz);                                                                                                            "+"\n"
			+"		//vec3 normal = normalize(VertexNormal.xyz);                                                                                                      "+"\n"
			+"		                                                                                                                                                  "+"\n"
			+"		//Especular Light                                                                                                                                 "+"\n"
			+"		//float specularLightWeighting = 0.0;                                                                                                             "+"\n"
			+"		//vec3 eyeDirection = normalize(-vPosition.xyz);                                                                                                  "+"\n"
			+"		//vec3 reflectionDirection = reflect(-lightDirection, normal);                                                                                    "+"\n"
			+"		//specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);                                             "+"\n"
			+"		                                                                                                                                                  "+"\n"
			+"		vec4 L = normalize(vec4(uMVMatrix * vec4(lightDirection, 0.0)));                                                                                  "+"\n"
			+"		vec4 N = normalize(vec4(uMVMatrix * vec4(VertexNormal,0.0)));                                                                                     "+"\n"
			+"		                                                                                                                                                  "+"\n"
			+"       //float diffuseLightWeightinwwg = max(dot(normalize(N.xyz), normalize(L.xyz)),0.0);                                                              "+"\n"
			+"		float nivel_difuso=0.0;                                                                                                                           "+"\n"
			+"		float diffuseLightWeighting = max(dot(N.xyz, L.xyz),nivel_difuso);                                                                                "+"\n"
			+"		lightWeighting = uAmbientColor + uDirectionalColor * diffuseLightWeighting;                                                                       "+"\n"
			+"       //lightWeighting = uAmbientColor + uPointLightingSpecularColor * specularLightWeighting + uDirectionalColor * diffuseLightWeighting;             "+"\n"
			+"		//lightWeighting = uAmbientColor + uPointLightingSpecularColor * specularLightWeighting;                                                          "+"\n"
			+"		vec4 fragmentColor;                                                                                                                               "+"\n"
			+"		fragmentColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));                                                                      "+"\n"
			+"		                                                                                                                                                  "+"\n"
			+"		float alpha=1.0;                                                                                                                                  "+"\n"
			+"		gl_FragColor = vec4(fragmentColor.rgb * lightWeighting, fragmentColor.a);                                                                         "+"\n"
			+"                                                                                                                                                        "+"\n"
			+"   }	                                                                                                                                                  ";
	
	
	public static final String BASIC_VERTEX_SHADER=""
			+"    attribute vec3 aVertexPosition;                            "+"\n"
			+"    attribute vec4 aVertexColor;                               "+"\n"
			+"	attribute vec3 aVertexNormal;                                "+"\n"
			+"	attribute vec2 aVertexTexture;                               "+"\n"
			+"	                                                             "+"\n"
			+"	uniform mat4 uNormalMatrix;                                  "+"\n"
			+"    uniform mat4 uMVMatrix;                                    "+"\n"
			+"    uniform mat4 uPMatrix;                                     "+"\n"
			+"	uniform vec3 uAmbientColor;	                                 "+"\n"
			+"                                                               "+"\n"
			+"	varying highp vec4 vColor;                                   "+"\n"
			+"	varying highp vec4 v_normal;                                 "+"\n"
			+"	varying highp vec2 vTextureCoord;                            "+"\n"
			+"	varying vec3 vLightWeighting;                                "+"\n"
			+"	varying vec4 vPosition;                                      "+"\n"
			+"	                                                             "+"\n"
			+"	 varying highp vec3 vLighting;                               "+"\n"
			+"    void main(void)                                            "+"\n"
			+"	{                                                            "+"\n"
			+"		vPosition = uMVMatrix * vec4(aVertexPosition, 1.0);      "+"\n"
			+"		gl_Position = uPMatrix * vPosition;                      "+"\n"
			+"		                                                         "+"\n"
			+"		vTextureCoord = aVertexTexture;                          "+"\n"
			+"        vColor = aVertexColor;                                 "+"\n"
			+"	    v_normal = uNormalMatrix * vec4(aVertexNormal, 1.0);     "+"\n"
			+"		                                                         "+"\n"
			+"    }                                                          ";
	
	
	public static final String BASIC_FRAGMENT_SHADER=""+"\n"
			+"    #ifdef GL_ES                             "+"\n"
			+"    precision highp float;                   "+"\n"
			+"    #endif                                   "+"\n"
			+"                                             "+"\n"
			+"    varying highp vec4 vColor;               "+"\n"
			+"	varying highp vec4 v_normal;               "+"\n"
			+"	varying vec2 vTextureCoord;                "+"\n"
			+"	varying vec3 vLightWeighting;              "+"\n"
			+"	varying vec4 vPosition;                    "+"\n"
			+"	                                           "+"\n"
			+"	uniform vec3 uAmbientColor;                "+"\n"
			+"                                             "+"\n"
			+"	uniform vec3 uPointLightingLocation;       "+"\n"
			+"	uniform vec3 uDirectionalColor;            "+"\n"
			+"	uniform float uMaterialShininess;          "+"\n"
			+"	uniform vec3 uPointLightingSpecularColor;  "+"\n"
			+"	                                           "+"\n"
			+"	uniform sampler2D uSampler;                "+"\n"
			+"	varying highp vec3 vLighting;              "+"\n"
			+"                                             "+"\n"
			+"    void main(void)                          "+"\n"
			+"	{                                          "+"\n"
			+"		                                       "+"\n"
			+"		gl_FragColor=vec4(0.5,0.5,0.5,1.0);    "+"\n"
			+"      	                                   "+"\n"
			+"    }                                        ";

}
